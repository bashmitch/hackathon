version: '3'

services:
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    ports:
      - "9443:9443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

  rancher:
    image: rancher/rancher
    privileged: true
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      CATTLE_BOOTSTRAP_PASSWORD: "Password1234"

  gitbucket:
    image: gitbucket/gitbucket:latest
    container_name: gitbucket
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - gitbucket_data:/gitbucket
    environment:
      GITBUCKET_PORT: 8080
      GITBUCKET_HOME: /gitbucket
  
  homer:
    image: b4bz/homer:latest
    container_name: homer
    ports:
      - "8085:8080" # Maps the container's port 8080 to the host's port 8085
    volumes:
      - ./homer/config.yml:/www/assets/config.yml:ro # Bind mount for configuration
      - ./homer/assets:/www/assets/icons:ro # Bind mount for logos and assets
    restart: unless-stopped # Automatically restart the container unless manually stopped
    environment:
      TITLE: "My Dashboard"
      SUBTITLE: "Quick Access to Services"

  headscale:
    image: headscale/headscale:stable
    container_name: headscale
    volumes:
      - /etc/headscale/config:/etc/headscale
      - ./container-data/data:/var/lib/headscale
    ports:
      - 3014:8080
      - 9090:9090
    command: serve
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"   # Limit to 0.5 CPUs
          memory: "512M" # Limit to 512MB RAM

  jellyfin:
    image: jellyfin/jellyfin
    container_name: jellyfin
    network_mode: 'host'
    environment:
      - JELLYFIN_PublishedServerUrl=http://example.com
    extra_hosts:
      - 'host.docker.internal:host-gateway'

  registry:
    image: registry:2
    container_name: registry
    ports:
      - "5000:5000"
    volumes:
      - ./data:/var/lib/registry

  postgresql:
    image: postgres:16
    hostname: postgresql # Explicit hostname for resolution
    environment:
      - POSTGRES_USER=keycloak
      - POSTGRES_DB=keycloak
      - POSTGRES_PASSWORD=SUPERsecret
    volumes:
      - '/home/ubuntu/docker/keycloak/postgresql_data:/var/lib/postgresql/data'
    networks:
      - keycloak_network

  keycloak:
    image: quay.io/keycloak/keycloak:22.0.3
    restart: always
    command: start
    depends_on:
      - postgresql
    environment:
      - KC_PROXY_ADDRESS_FORWARDING=true
      - KC_HOSTNAME_STRICT=false
      - KC_HTTP_ENABLED=true
      - KC_DB=postgres
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=SUPERsecret
      - KC_DB_URL_HOST=postgresql # Matches the hostname of the PostgreSQL service
      - KC_DB_URL_PORT=5432
      - KC_DB_URL_DATABASE=keycloak
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=password
    ports:
      - "3002:8080" # Expose Keycloak's HTTP port on localhost
    networks:
      - keycloak_network

  db:
    image: mariadb:10.11
    container_name: nextcloud_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: Password123!  # Replace with a strong password
      MYSQL_DATABASE: nextcloud
      MYSQL_USER: nextcloud
      MYSQL_PASSWORD: Password123! # Replace with a strong password
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - nextcloud_network

  app:
    image: nextcloud
    container_name: nextcloud_app
    restart: always
    ports:
      - "3010:80"
    volumes:
      - nextcloud_data:/var/www/html
    environment:
      MYSQL_HOST: db
      MYSQL_DATABASE: nextcloud
      MYSQL_USER: nextcloud
      MYSQL_PASSWORD: Password123!
    depends_on:
      - db
    networks:
      - nextcloud_network

  vault:
    image: hashicorp/vault:latest
    container_name: vault
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "root"  # Development mode root token
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"  # Expose to all interfaces
    cap_add:
      - IPC_LOCK  # Prevent swapping Vault's memory to disk
    volumes:
      - ./vault-data:/vault/data  # Optional: Persistent storage
    command: server -dev

networks:
  keycloak_network:
    driver: bridge

  nextcloud_network:
    driver: bridge

volumes:
  portainer_data:
  db_data:
  nextcloud_data:
  gitbucket_data:
  postgres_data:
  homer-config:
    driver: local
